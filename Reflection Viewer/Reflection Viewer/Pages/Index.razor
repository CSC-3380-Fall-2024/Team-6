@page "/"
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<h1>PDF Uploader and Viewer</h1>

<div class="upload-section">
    <h3>Upload a PDF File</h3>
    <InputFile OnChange="HandleFileSelected" accept=".pdf" />
</div>

@if (!string.IsNullOrEmpty(UploadedPdfUrl))
{
    <div class="viewer-section">
        <h3>Current PDF Viewer</h3>
        <iframe src="@UploadedPdfUrl" width="100%" height="600px"></iframe>
        <button class="btn btn-primary" @onclick="SavePdf">Save PDF</button>
    </div>
}

@if (SavedPdfs.Any())
{
    <div class="saved-section">
        <h3>Saved PDFs</h3>
        <ul>
            @foreach (var pdf in SavedPdfs)
            {
                <li>
                    <button @onclick="() => LoadPdf(pdf)">View Saved PDF @(@SavedPdfs.IndexOf(pdf) + 1)</button>
                </li>
            }
        </ul>
    </div>
}

@code {
    private string? UploadedPdfUrl;
    private List<string> SavedPdfs = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var savedPdfsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "savedPdfs");
        if (!string.IsNullOrEmpty(savedPdfsJson))
        {
            SavedPdfs = System.Text.Json.JsonSerializer.Deserialize<List<string>>(savedPdfsJson) ?? new List<string>();
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            if (file.ContentType != "application/pdf")
            {
                UploadedPdfUrl = null;
                return;
            }

            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            var base64String = Convert.ToBase64String(stream.ToArray());
            UploadedPdfUrl = $"data:application/pdf;base64,{base64String}";
        }
    }

    private async void SavePdf()
    {
        if (!string.IsNullOrEmpty(UploadedPdfUrl))
        {
            SavedPdfs.Add(UploadedPdfUrl);

            var savedPdfsJson = System.Text.Json.JsonSerializer.Serialize(SavedPdfs);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "savedPdfs", savedPdfsJson);
        }
    }

    private void LoadPdf(string pdfUrl)
    {
        UploadedPdfUrl = pdfUrl;
    }
}
<h3>Debug: Saved PDF URLs</h3>
<ul>
    @foreach (var pdf in SavedPdfs)
    {
        <li>@pdf</li>
    }
</ul>
